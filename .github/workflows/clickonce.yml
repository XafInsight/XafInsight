name: Build & Publish VSTO (main â†’ GitHub Pages)

permissions:
  contents: write  # push naar gh-pages + releases

on:
  push:
    branches: [ main ]
  workflow_dispatch: {}

jobs:
  build-and-deploy:
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v4

      # Pin MSBuild/VS 2022 x64
      - name: Setup MSBuild (VS 2022 x64)
        uses: microsoft/setup-msbuild@v2

      - name: Restore NuGet
        run: nuget restore xafplugin.sln

      # 0) Bepaal ClickOnce-versie uit GitHub run number (1.0.0.<run>)
      - name: Compute version from GitHub run number
        id: ver
        shell: pwsh
        run: |
          $run = [int]("${{ github.run_number }}")
          if ($run -gt 65535) { throw "Run number $run is too large for ClickOnce (max 65535)" }
          $version = "1.0.0.$run"
          "CLICKONCE_VERSION=$version" | Out-File -FilePath $env:GITHUB_ENV -Append
          "version=$version"          | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          Write-Host "ClickOnce version: $version"

      # 1) Decodeer PFX, importeer in CurrentUser\My, expose THUMBPRINT
      - name: Restore & import signing certificate
        id: cert
        shell: pwsh
        run: |
          if (-not "${{ secrets.CODESIGN_PFX_B64 }}") { throw "Missing secret CODESIGN_PFX_B64" }
          if (-not "${{ secrets.CODESIGN_PFX_PASSWORD }}") { throw "Missing secret CODESIGN_PFX_PASSWORD" }

          $pfxPath = Join-Path $env:RUNNER_TEMP "codesign.pfx"
          [IO.File]::WriteAllBytes($pfxPath, [Convert]::FromBase64String("${{ secrets.CODESIGN_PFX_B64 }}"))
          $sec = ConvertTo-SecureString "${{ secrets.CODESIGN_PFX_PASSWORD }}" -AsPlainText -Force
          $cert = Import-PfxCertificate -FilePath $pfxPath -CertStoreLocation Cert:\CurrentUser\My -Password $sec
          if (-not $cert -or -not $cert.HasPrivateKey) { throw "Cert import failed or no private key" }
          "thumb=$($cert.Thumbprint)" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

      # 2) ClickOnce Publish (gebruikt versie uit stap 'ver')
      - name: ClickOnce Publish
        shell: pwsh
        run: >
          msbuild "xafplugin/xafplugin.csproj"
          /t:Publish /p:Configuration=Release
          /p:SignManifests=true
          /p:ManifestCertificateThumbprint=${{ steps.cert.outputs.thumb }}
          /p:PublishDir="$((Resolve-Path .).Path)\xafplugin\publish\"
          /p:ManifestTimestampUrl=http://timestamp.digicert.com
          /p:AutoIncrementApplicationRevision=false
          /p:ApplicationVersion=${{ steps.ver.outputs.version }}

      # 2a) Fail-fast: vereiste publish-bestanden moeten bestaan
      - name: Verify publish output
        shell: pwsh
        run: |
          $pub   = "xafplugin\publish"
          $vsto  = Join-Path $pub "xafplugin.vsto"
          $setup = Join-Path $pub "setup.exe"
          if (-not (Test-Path $pub))  { throw "Publish folder missing: $pub" }
          if (-not (Test-Path $vsto)) { throw "Missing VSTO: $vsto" }
          if (-not (Test-Path $setup)) { throw "Missing setup.exe: $setup" }
          Write-Host "Publish OK."

      # 2b) Guard: fail als tag of gh-pages die versie al heeft
      - name: Guard - fail if version already released
        shell: pwsh
        run: |
          $ver = "${{ steps.ver.outputs.version }}"
          if (-not $ver) { throw "No version computed" }

          git fetch --tags origin | Out-Null
          if (git tag -l "v$ver") { throw "Tag v$ver bestaat al" }

          # ClickOnce mappen gebruiken underscores (1.2.3.4 -> 1_2_3_4)
          $vUS = ($ver -replace '\.','_')
          try { git fetch origin gh-pages --depth=1 | Out-Null } catch { }
          $paths = git ls-tree -r --name-only origin/gh-pages 2>$null
          if ($paths) {
            $re = 'clickonce[\\/]+Application Files[\\/].*(' + [regex]::Escape($ver) + '|' + [regex]::Escape($vUS) + ')'
            if ($paths | Where-Object { $_ -match $re }) { throw "gh-pages bevat al artifacts voor $ver" }
          }

      # 3) Zet volledige publish-output naar /clickonce/ op gh-pages
      - name: Prepare site folder for Pages
        shell: pwsh
        run: |
          $pub   = "xafplugin\publish"
          $site  = "site\clickonce"
          if (Test-Path site) { Remove-Item -Recurse -Force site }
          New-Item -ItemType Directory -Force $site | Out-Null
          Copy-Item "$pub\*" $site -Recurse -Force

          # force binary bytes + nojekyll
          Set-Content -Path "site/.gitattributes" -Value @('# binary','/clickonce/** -text') -Encoding ASCII
          New-Item -ItemType File -Path "site/.nojekyll" -Force | Out-Null

      - name: Generate index.html
        shell: pwsh
        run: |
          $dest = "site\clickonce"
          $ver  = "${{ steps.ver.outputs.version }}"
      
          $html = @(
            '<!doctype html>'
            '<html lang="en">'
            '<head>'
            '  <meta charset="utf-8">'
            '  <title>XafInsight ClickOnce</title>'
            '</head>'
            '<body>'
            '  <h1>XafInsight ClickOnce deployment</h1>'
            "  <p><strong>Version:</strong> $ver</p>"
            '  <ul>'
            '    <li><a href="setup.exe">setup.exe</a> (bootstrapper)</li>'
            '    <li><a href="xafplugin.vsto">xafplugin.vsto</a> (add-in manifest)</li>'
            '  </ul>'
            '</body>'
            '</html>'
          ) -join "`r`n"
      
          $html | Set-Content -Path "$dest\index.html" -Encoding UTF8


      - name: Deploy to gh-pages (keep existing files)
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: site
          publish_branch: gh-pages
          keep_files: true

      # 4) Release assets (vaste namen, fail-fast)
      - name: Collect release assets
        shell: pwsh
        run: |
          $pub   = "xafplugin\publish"
          $out   = "out"
          $vsto  = Join-Path $pub "xafplugin.vsto"
          $setup = Join-Path $pub "setup.exe"
          if (Test-Path $out) { Remove-Item -Recurse -Force $out }
          New-Item -ItemType Directory -Force $out | Out-Null
          Copy-Item $vsto  (Join-Path $out "xafplugin.vsto") -Force
          Copy-Item $setup (Join-Path $out "setup.exe")      -Force

          $appFiles = Join-Path $pub "Application Files"
          if (-not (Test-Path $appFiles)) { throw "'Application Files' map ontbreekt: $appFiles" }
          Add-Type -A System.IO.Compression.FileSystem
          [System.IO.Compression.ZipFile]::CreateFromDirectory($appFiles, (Join-Path $out "application-files.zip"))

      - name: Rename assets with version
        shell: pwsh
        run: |
          $v = "${{ steps.ver.outputs.version }}"
          Rename-Item -LiteralPath "out\xafplugin.vsto" "xafplugin-$v.vsto" -ErrorAction Stop
          Rename-Item -LiteralPath "out\setup.exe"      "setup-$v.exe"      -ErrorAction Stop

      - name: Compute short SHA
        shell: pwsh
        run: |
          "SHORT_SHA=$('${{ github.sha }}'.Substring(0,7))" | Out-File -FilePath $env:GITHUB_ENV -Append

      # (optioneel) Synchroniseer ApplicationVersion in csproj
      - name: Sync ApplicationVersion in csproj and push [skip ci]
        shell: pwsh
        run: |
          $csproj = "xafplugin\xafplugin.csproj"
          $ver = "${{ steps.ver.outputs.version }}"
          if (-not (Test-Path $csproj)) { throw "csproj not found: $csproj" }
          [xml]$xml = Get-Content $csproj
          $nsm = New-Object System.Xml.XmlNamespaceManager($xml.NameTable)
          $nsm.AddNamespace("msb","http://schemas.microsoft.com/developer/msbuild/2003")
          $node = $xml.SelectSingleNode("//msb:Project/msb:PropertyGroup/msb:ApplicationVersion", $nsm)
          if (-not $node) {
            $pg = $xml.SelectSingleNode("//msb:Project/msb:PropertyGroup[1]", $nsm)
            if (-not $pg) { throw "No PropertyGroup in csproj" }
            $node = $xml.CreateElement("ApplicationVersion", "http://schemas.microsoft.com/developer/msbuild/2003")
            $pg.AppendChild($node) | Out-Null
          }
          $old = $node.InnerText
          $node.InnerText = $ver
          $xml.Save($csproj)
          if ($old -ne $ver) {
            git config user.email "ci@github.actions"
            git config user.name  "GitHub Actions"
            git add $csproj
            git commit -m "chore: sync ApplicationVersion to $ver [skip ci]" | Out-Null
            git push origin HEAD:main
          }

      - name: Create GitHub Release for build
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.ver.outputs.version }}
          target_commitish: ${{ github.sha }}
          name: "XafInsight ${{ steps.ver.outputs.version }} (${{ env.SHORT_SHA }})"
          draft: false
          prerelease: false
          files: |
            out/xafplugin-${{ steps.ver.outputs.version }}.vsto
            out/setup-${{ steps.ver.outputs.version }}.exe
            out/application-files.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
