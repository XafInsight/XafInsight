name: Build & Publish VSTO (main → GitHub Pages)

permissions:
  contents: write  # push naar gh-pages + releases

on:
  push:
    branches: [ main ]
  workflow_dispatch: {}

jobs:
  build-and-deploy:
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v2

      - name: Restore NuGet
        run: nuget restore xafplugin.sln

      # 1) Decodeer PFX, importeer in CurrentUser\My, expose THUMBPRINT
      - name: Restore & import signing certificate
        id: cert
        shell: pwsh
        run: |
          if (-not "${{ secrets.CODESIGN_PFX_B64 }}") { throw "Missing secret CODESIGN_PFX_B64" }
          if (-not "${{ secrets.CODESIGN_PFX_PASSWORD }}") { throw "Missing secret CODESIGN_PFX_PASSWORD" }

          $pfxPath = Join-Path $env:RUNNER_TEMP "codesign.pfx"
          [IO.File]::WriteAllBytes($pfxPath, [Convert]::FromBase64String("${{ secrets.CODESIGN_PFX_B64 }}"))

          certutil -p "${{ secrets.CODESIGN_PFX_PASSWORD }}" -dump "$pfxPath" | Out-Null

          $sec = ConvertTo-SecureString "${{ secrets.CODESIGN_PFX_PASSWORD }}" -AsPlainText -Force
          $cert = Import-PfxCertificate -FilePath "$pfxPath" -CertStoreLocation Cert:\CurrentUser\My -Password $sec
          if (-not $cert.HasPrivateKey) { throw "Imported cert has no private key" }

          "thumb=$($cert.Thumbprint)" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

      # 2) ClickOnce Publish (gesigned via THUMBPRINT) + forceer outputmap
      - name: ClickOnce Publish (main, signed via thumbprint)
        shell: pwsh
        run: >
          msbuild "xafplugin/xafplugin.csproj"
          /t:Publish /p:Configuration=Release
          /p:AutoIncrementApplicationRevision=true
          /p:SignManifests=true
          /p:ManifestCertificateThumbprint=${{ steps.cert.outputs.thumb }}
          /p:PublishDir="$((Resolve-Path .).Path)\xafplugin\publish\"
          /p:ManifestTimestampUrl=http://timestamp.digicert.com

      - name: List publish output
        shell: pwsh
        run: |
          Write-Host "Workspace: $((Resolve-Path .).Path)"
          if (Test-Path "xafplugin\publish") {
            Write-Host "Publish folder content:"
            Get-ChildItem -Recurse -Force "xafplugin\publish" | ForEach-Object { Write-Host $_.FullName }
          } else {
            Write-Host "Publish folder not found."
            Write-Host "Fallback check (bin\Release\app.publish):"
            if (Test-Path "xafplugin\bin\Release\app.publish") {
              Get-ChildItem -Recurse -Force "xafplugin\bin\Release\app.publish" | ForEach-Object { Write-Host $_.FullName }
            }
          }

      # 3) Zet volledige publish-output naar /clickonce/ op gh-pages
      - name: Prepare site folder for Pages
        shell: pwsh
        run: |
          if (Test-Path site) { Remove-Item -Recurse -Force site }
          New-Item -ItemType Directory -Force "site/clickonce" | Out-Null
          Copy-Item "xafplugin\publish\*" "site\clickonce" -Recurse -Force

      # 3a) Forceer binaire bytes (geen CRLF/LF conversie) voor alles onder /clickonce/
      - name: Add .gitattributes to preserve file bytes
        shell: pwsh
        run: |
          $lines = @(
            '# Force binary handling: no CRLF/LF conversion for ClickOnce payload'
            '/clickonce/** -text'
          )
          Set-Content -Path "site/.gitattributes" -Value $lines -Encoding ASCII

      # 3b) Zet .nojekyll zodat GitHub Pages niets probeert te verwerken
      - name: Disable Jekyll on GitHub Pages
        shell: pwsh
        run: New-Item -ItemType File -Path "site/.nojekyll" -Force | Out-Null

      - name: Generate index.html
        shell: pwsh
        run: |
          $dest = "site\clickonce"
          New-Item -ItemType Directory -Force $dest | Out-Null

          # Toon alleen links voor bestanden die bestaan
          $links = @()
          if (Test-Path "$dest\setup.exe")               { $links += '    <li><a href="setup.exe">setup.exe</a> (bootstrapper)</li>' }
          if (Test-Path "$dest\xafplugin.vsto")          { $links += '    <li><a href="xafplugin.vsto">xafplugin.vsto</a> (add-in manifest)</li>' }
          if (Test-Path "$dest\xafplugin.application")   { $links += '    <li><a href="xafplugin.application">xafplugin.application</a> (ClickOnce manifest)</li>' }

          $htmlLines = @(
            '<!doctype html>',
            '<html lang="en">',
            '<head>',
            '  <meta charset="utf-8" />',
            '  <meta http-equiv="x-ua-compatible" content="ie=edge" />',
            '  <meta name="viewport" content="width=device-width, initial-scale=1" />',
            '  <title>XafInsight ClickOnce</title>',
            '</head>',
            '<body>',
            '  <h1>XafInsight ClickOnce deployment</h1>',
            '  <ul>'
          ) + $links + @(
            '  </ul>',
            '</body>',
            '</html>'
          )

          $htmlLines | Set-Content -Path "$dest\index.html" -Encoding UTF8

      - name: Deploy to gh-pages (keep existing files)
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: site
          publish_branch: gh-pages
          keep_files: true

      # 4) Verzamelen van release-assets (alleen kopiëren wat bestaat)
      - name: Collect release assets
        shell: pwsh
        run: |
          if (Test-Path out) { Remove-Item -Recurse -Force out }
          New-Item -ItemType Directory -Force out | Out-Null

          $src = "xafplugin\publish"
          $files = @(
            "xafplugin.vsto",
            "setup.exe",
            "xafplugin.application"
          )
          foreach ($f in $files) {
            $p = Join-Path $src $f
            if (Test-Path $p) { Copy-Item $p "out\" -Force }
          }

          # Laat ook de map Application Files als zip achter (handig voor debug/archief)
          $appFiles = Join-Path $src "Application Files"
          if (Test-Path $appFiles) {
            Add-Type -A System.IO.Compression.FileSystem
            $zip = Join-Path (Resolve-Path out) "application-files.zip"
            if (Test-Path $zip) { Remove-Item $zip -Force }
            [System.IO.Compression.ZipFile]::CreateFromDirectory($appFiles, $zip)
          }

      # 4b) Korte SHA voor in de release-naam
      - name: Compute short SHA
        shell: pwsh
        run: |
          $short = "${{ github.sha }}".Substring(0,7)
          "SHORT_SHA=$short" | Out-File -FilePath $env:GITHUB_ENV -Append

      # 5) Maak/Update een Release voor deze build
      - name: Create GitHub Release for build
        uses: softprops/action-gh-release@v2
        with:
          tag_name: build-${{ github.run_number }}
          target_commitish: ${{ github.sha }}
          name: "Build ${{ github.run_number }} (${{ env.SHORT_SHA }})"
          draft: false
          prerelease: false
          files: |
            out/xafplugin.vsto
            out/setup.exe
            out/xafplugin.application
            out/application-files.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
